/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.37
 * Generated at: 2020-08-04 01:52:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.*;
import com.koreait.web.BoardVO;

public final class boardlist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

 
	private Connection getCon() throws Exception {
		String url = "jdbc:oracle:thin:@localhost:1521:orcl";
		String username = "hr";
		String password = "koreait2020";
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		
		Connection con = DriverManager.getConnection(url, username, password);
		System.out.println("접속 성공!");
		
		return con;
	}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.koreait.web.BoardVO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');

	List<BoardVO> boardList = new ArrayList();
	Connection con = null; // 연결 담당
	PreparedStatement ps = null; // 쿼리문 완성 + 쿼리문 실행
	ResultSet rs = null; // select문의 결과를 담는 과정
	
	String sql = " SELECT i_board, title FROM t_board ORDER BY i_board DESC ";
	// 쿼리문 양쪽에는 웬만하면 빈칸 하나씩 두기
	// 여러 줄에 걸쳐서 쓸 때도 빈칸 넣기
	// " SELECT i_board, title " + " FROM t_board ";
	// 쿼리문 뒤에 세미콜론을 넣으면 실행이 안 되도록 함
	
	try {
		con = getCon();
		ps = con.prepareStatement(sql);
		rs = ps.executeQuery(); // select문만!!!!!!!!!!!!!!!!!!!!!
		
		while(rs.next()) {	// rs.next()를 실행하는 순간 첫번째 줄을 가리킴
							// 다음 rs.next()를 실행했는데 다음 줄이 있으면 true 리턴, 없으면 false 리턴
							// 보통 rs는 이 while문과 같이 씀
							// 한 줄만 가져와야 할 땐 if문과 같이 씀
			int i_board = rs.getInt("i_board");	// getInt의 인자값은 컬럼명
			String title = rs.getNString("title");	// getNString이나 getString 둘 다 똑같음, 인자값 컬럼명
			
			BoardVO vo = new BoardVO();	// ☆★☆★☆★☆★☆★☆★☆★☆★☆★
										// while문 밖에서 선언하면 똑같은 내용만 나옴
			vo.setI_board(i_board);
			vo.setTitle(title);
			
			boardList.add(vo);
		}
		
	} catch(Exception e) {
		e.printStackTrace();
	} finally {
		if(rs != null) { try { rs.close(); } catch(Exception e) {} }
		if(ps != null) { try { ps.close(); } catch(Exception e) {} }
		if(con != null) { try { con.close(); } catch(Exception e) {} }
	}
	// 열었으면 꼭 닫아주기!!!! 순서는 여는 순서와 반대로 닫기
	// 다 같이 묶어주면 셋 중에 하나만 에러가 나도 나머지는 close가 실행되지 않고 바로 catch문으로 넘어가버림
	// 안 닫아주면 서버 죽음
	
	// /jsp/boardDetail.jsp?i_board=<%=vo.getI_board() 여기서 ? 뒤에는 쿼리스트링
			// ?는 쿼리스트링을 시작하겠다는 의미
			// 키값=밸류
			// & - 키값과 밸류를 더 보내고 싶을 때 쓰는 연결자
			// get 방식 - 주소에 쿼리스트링이 노출되는 방식(속도 중요)
			// host 방식 - 주소에 쿼리스트링이 노출되지 않는 방식(보안 중요)

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>게시판</title>\r\n");
      out.write("<style>\r\n");
      out.write("\tbody {\r\n");
      out.write("\t\twidth: 100%;\r\n");
      out.write("\t\theight: 100%;\r\n");
      out.write("\t\tmargin: 0;\r\n");
      out.write("\t\tpadding: 0;\r\n");
      out.write("\t}\r\n");
      out.write("\t.container {\r\n");
      out.write("\t\twidth: 500px;\r\n");
      out.write("\t\theight: 500px;\r\n");
      out.write("\t\tborder: 1px solid black;\r\n");
      out.write("\t\tdisplay: flex;\r\n");
      out.write("        justify-content: center;\r\n");
      out.write("        align-items: center;\r\n");
      out.write("\t}\r\n");
      out.write("\t.container .contents {\r\n");
      out.write("\t\twidth: auto;\r\n");
      out.write("\t\tborder: 3px solid black;\r\n");
      out.write("\t\r\n");
      out.write("\t}\r\n");
      out.write("\t.container .contents .header {\r\n");
      out.write("\t\twidth: 100%;\r\n");
      out.write("\t\tdisplay: flex;\r\n");
      out.write("\t\tjustify-content: flex-end;\r\n");
      out.write("\t}\r\n");
      out.write("    table {\r\n");
      out.write("        border-collapse: collapse;\r\n");
      out.write("    }\r\n");
      out.write("    tr, td, th {\r\n");
      out.write("        border: 1px solid black;\r\n");
      out.write("        width: 100px;\r\n");
      out.write("        text-align: center;\r\n");
      out.write("    }\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div class=\"container\">\r\n");
      out.write("\t\t<div class=\"contents\">\r\n");
      out.write("\t\t<p>게시판 리스트</p>\r\n");
      out.write("\t\t\t<header class=\"header\">\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t<a href=\"/jsp/boardWrite.jsp\"><button>글쓰기</button></a> <!-- 글쓰는 화면 띄우는 용도인 boardWrite.jsp와 -->\r\n");
      out.write("\t\t\t\t\t<!-- 폼으로 받아서 insert 날리고 실제 처리하는 boardWriteProc.jsp 파일 두 개가 필요함 -->\r\n");
      out.write("\t\t\t</header>\r\n");
      out.write("\t\t\t<table>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<th>No</th>\r\n");
      out.write("\t\t\t\t\t<th>제목</th>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t");
 for(BoardVO vo : boardList) {
      out.write("\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td>");
      out.print(vo.getI_board() );
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t<td><a href=\"/jsp/boardDetail.jsp?i_board=");
      out.print(vo.getI_board() );
      out.write(" \" target=\"_blank\">\r\n");
      out.write("\t\t\t\t\t\t");
      out.print(vo.getTitle() );
      out.write(" \r\n");
      out.write("\t\t\t\t\t\t</a>\r\n");
      out.write("\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t");
 } 
      out.write(" \r\n");
      out.write("\t\t\t</table>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
