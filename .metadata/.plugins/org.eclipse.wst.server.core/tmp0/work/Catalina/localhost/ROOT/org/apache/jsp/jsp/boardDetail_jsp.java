/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.37
 * Generated at: 2020-08-03 05:15:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import com.koreait.web.BoardVO;

public final class boardDetail_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

 
	Connection getCon() throws Exception {
		String url = "jdbc:oracle:thin:@localhost:1521:orcl";
		String username = "hr";
		String password = "koreait2020";
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		
		Connection con = DriverManager.getConnection(url, username, password);
		System.out.println("접속 성공!");
		
		return con;
	}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.koreait.web.BoardVO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');

	String strI_board = request.getParameter("i_board");
	if(strI_board == null) {

      out.write("\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\talert('잘못된 접근입니다.')\r\n");
      out.write("\t\tlocation.href='/jsp/boardlist.jsp'\r\n");
      out.write("\t</script>\r\n");
      out.write("\r\n");

		return;
	}
	int i_board = Integer.parseInt(strI_board);

	BoardVO vo = new BoardVO();
	Connection con = null; // 연결 담당
	PreparedStatement ps = null; // 쿼리문 완성 + 쿼리문 실행
	ResultSet rs = null; // select문의 결과를 담는 과정
	
	String name = "";
	
	String sql = " SELECT title, ctnt, i_student FROM t_board WHERE i_board = " + strI_board;
	//sql = " SELECT a.i_student as I_STUDENT, title, ctnt, nm FROM t_board A JOIN T_STUDENT B ON A.i_student = B.i_student WHERE i_board = " + strI_board;
	sql = " SELECT title, ctnt, i_student FROM t_board WHERE i_board = ? ";
	sql = " SELECT a.i_student as I_STUDENT, title, ctnt, nm FROM t_board A JOIN T_STUDENT B ON A.i_student = B.i_student WHERE i_board = ? ";
	
	try {
		con = getCon();
		ps = con.prepareStatement(sql);
		ps.setInt(1, i_board);			// 첫번째 물음표에 i_board를 넣어줌
		//ps.setString(1, strI_board);	// 첫번째 물음표에 strI_board를 넣어줌
										// String이라서 자동으로 '' 홑따옴표로 감싸줌
										// setString 해도 문제는 없지만 정수니까 int로!
		
		rs = ps.executeQuery();			// 쿼리문 실행 - 무조건 물음표 처리 후 실행해야 함
		
		if(rs.next()) {	// 몇 줄이든 간에 한 번은 실행이 되어야 함
						// 처음 실행하면 첫 줄을 가리킴
			// int i_board = rs.getInt("i_board");
			String title = rs.getNString("title");
			String ctnt = rs.getNString("ctnt");
			int i_student = rs.getInt("i_student");
			name = rs.getNString("nm");
			
			
			//  vo.setI_board(i_board);
			vo.setTitle(title);
			vo.setCtnt(ctnt);
			vo.setI_student(i_student);
		}
		
		
		// boardDel.jsp 파일 만들고 삭제 - ps.executeUpdate 사용-> 리턴 타입 int -> 몇 개 행에 영향을 미쳤는지
		// 몇 개 행을 삭제했는지 
		
	} catch(Exception e) {
		e.printStackTrace();
	} finally {
		if(rs != null) { try { rs.close(); } catch(Exception e) {} }
		if(ps != null) { try { ps.close(); } catch(Exception e) {} }
		if(con != null) { try { con.close(); } catch(Exception e) {} }
	}
	
	// 연결했는데 또 연결해주는 이유	-> 쓰자마자 close() 해서 닫았기 때문
	// 타이틀도 getParameter로 받을 수 있는가	-> 받아올 수는 있지만 트래픽 발생이 많고 비효율적이라 pk값을 받아오는 것이 좋음
	

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>상세 페이지</title>\r\n");
      out.write("<style>\r\n");
      out.write("\t\r\n");
      out.write("    table {\r\n");
      out.write("        border-collapse: collapse;\r\n");
      out.write("    }\r\n");
      out.write("    tr, td, th {\r\n");
      out.write("        border: 1px solid black;\r\n");
      out.write("        width: 100px;\r\n");
      out.write("        text-align: center;\r\n");
      out.write("    }\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div class=\"container\">\r\n");
      out.write("\t<div>\r\n");
      out.write("\t<a href=\"/jsp/boardlist.jsp\">리스트로 가기</a>\r\n");
      out.write("\t<a href=\"#\" onclick=\"procDel(");
      out.print(i_board);
      out.write(")\">삭제</a>\r\n");
      out.write("\t<a href=\"/jsp/boardMod.jsp?i_board=");
      out.print(i_board);
      out.write("\">수정</a>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\t<table>\r\n");
      out.write("\t\t\t<caption>상세 페이지 : ");
      out.print(strI_board );
      out.write("</caption>\r\n");
      out.write("\t        <tr>\r\n");
      out.write("\t            <th>글 번호</th>\r\n");
      out.write("\t            <th>글 제목</th>\r\n");
      out.write("\t            <th>글 내용</th>\r\n");
      out.write("\t            <th>작성자</th>\r\n");
      out.write("\t        </tr>\r\n");
      out.write("\t        <tr>\r\n");
      out.write("\t            <td>");
      out.print(strI_board );
      out.write("</td>\r\n");
      out.write("\t            <td>");
      out.print(vo.getTitle() );
      out.write("</td>\r\n");
      out.write("\t            <td style=\"width: 200px\">");
      out.print(vo.getCtnt() );
      out.write("</td>\r\n");
      out.write("\t            <td>");
      out.print(name );
      out.write("</td>\r\n");
      out.write("\t        </tr>\r\n");
      out.write("\t    </table>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\tfunction procDel(i_board) {\r\n");
      out.write("\t\t\talert('i_board : ' + i_board)\r\n");
      out.write("\t\t\tvar result = confirm('삭제하시겠습니까?')\r\n");
      out.write("\t\t\tif(result) {\r\n");
      out.write("\t\t\t\tlocation.href = '/jsp/boardDel.jsp?i_board=' + i_board\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
